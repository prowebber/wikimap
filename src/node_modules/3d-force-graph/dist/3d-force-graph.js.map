{"version":3,"sources":["../src/3d-force-graph.js"],"names":[],"mappings":"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","file":"3d-force-graph.js","sourcesContent":["import './3d-force-graph.css';\n\nimport * as THREE from 'three';\nimport trackballControls from 'three-trackballcontrols';\nimport qwest from 'qwest';\nimport accessorFn from 'accessor-fn';\nimport { schemePaired } from 'd3-scale-chromatic';\n\nimport * as d3 from 'd3-force-3d';\nimport graph from 'ngraph.graph';\nimport forcelayout from 'ngraph.forcelayout';\nimport forcelayout3d from 'ngraph.forcelayout3d';\nconst ngraph = { graph, forcelayout, forcelayout3d };\n\nimport Kapsule from 'kapsule';\n\n//\n\nconst CAMERA_DISTANCE2NODES_FACTOR = 150;\n\nexport default Kapsule({\n\n    props: {\n        width: { default: window.innerWidth },\n        height: { default: window.innerHeight },\n        jsonUrl: {},\n        graphData: {\n            default: {\n                nodes: [],\n                links: []\n            },\n            onChange(_, state) { state.onFrame = null; } // Pause simulation\n        },\n        numDimensions: { default: 3 },\n        nodeRelSize: { default: 4 }, // volume per val unit\n        nodeResolution: { default: 8 }, // how many slice segments in the sphere's circumference\n        onNodeClick: {},\n        lineOpacity: { default: 0.2 },\n        autoColorBy: {},\n        idField: { default: 'id' },\n        valField: { default: 'val' },\n        nameField: { default: 'name' },\n        colorField: { default: 'color' },\n        linkSourceField: { default: 'source' },\n        linkTargetField: { default: 'target' },\n        forceEngine: { default: 'd3' }, // d3 or ngraph\n        warmupTicks: { default: 0 }, // how many times to tick the force engine at init before starting to render\n        cooldownTicks: { default: Infinity },\n        cooldownTime: { default: 15000 } // ms\n    },\n\n    init: function(domNode, state) {\n        // Wipe DOM\n        domNode.innerHTML = '';\n\n        // Add nav info section\n        let navInfo;\n        domNode.appendChild(navInfo = document.createElement('div'));\n        navInfo.className = 'graph-nav-info';\n        navInfo.textContent = \"MOVE mouse & press LEFT/A: rotate, MIDDLE/S: zoom, RIGHT/D: pan\";\n\n        // Add info space\n        domNode.appendChild(state.infoElem = document.createElement('div'));\n        state.infoElem.className = 'graph-info-msg';\n        state.infoElem.textContent = 'Loading...';\n\n        // Setup tooltip\n        const toolTipElem = document.createElement('div');\n        toolTipElem.classList.add('graph-tooltip');\n        domNode.appendChild(toolTipElem);\n\n        // Capture mouse coords on move\n        const raycaster = new THREE.Raycaster();\n        const mousePos = new THREE.Vector2();\n        mousePos.x = -2; // Initialize off canvas\n        mousePos.y = -2;\n        domNode.addEventListener(\"mousemove\", ev => {\n            // update the mouse pos\n            const offset = getOffset(domNode),\n                relPos = {\n                    x: ev.pageX - offset.left,\n                    y: ev.pageY - offset.top\n                };\n            mousePos.x = (relPos.x / state.width) * 2 - 1;\n            mousePos.y = -(relPos.y / state.height) * 2 + 1;\n\n            // Move tooltip\n            toolTipElem.style.top = (relPos.y - 40) + 'px';\n            toolTipElem.style.left = (relPos.x - 20) + 'px';\n\n            function getOffset(el) {\n                const rect = el.getBoundingClientRect(),\n                    scrollLeft = window.pageXOffset || document.documentElement.scrollLeft,\n                    scrollTop = window.pageYOffset || document.documentElement.scrollTop;\n                return { top: rect.top + scrollTop, left: rect.left + scrollLeft };\n            }\n        }, false);\n\n        // Handle click events on nodes\n        domNode.addEventListener(\"click\", ev => {\n            if (state.onNodeClick) {\n                raycaster.setFromCamera(mousePos, state.camera);\n                const intersects = raycaster.intersectObjects(state.graphScene.children)\n                    .filter(o => o.object.__data); // Check only objects with data (nodes)\n                if (intersects.length) {\n                    state.onNodeClick(intersects[0].object.__data);\n                }\n            }\n        }, false);\n\n        // Setup renderer\n        state.renderer = new THREE.WebGLRenderer();\n        domNode.appendChild(state.renderer.domElement);\n\n        // Setup scene\n        const scene = new THREE.Scene();\n        scene.background = new THREE.Color(0x000011);\n        scene.add(state.graphScene = new THREE.Group());\n\n        // Add lights\n        scene.add(new THREE.AmbientLight(0xbbbbbb));\n        scene.add(new THREE.DirectionalLight(0xffffff, 0.6));\n\n        // Setup camera\n        state.camera = new THREE.PerspectiveCamera();\n        state.camera.far = 20000;\n\n        // Add camera interaction\n        const tbControls = new trackballControls(state.camera, state.renderer.domElement);\n\n        // Add D3 force-directed layout\n        this.d3ForceLayout = state.d3ForceLayout = d3.forceSimulation()\n            .force('link', d3.forceLink())\n            .force('charge', d3.forceManyBody())\n            .force('center', d3.forceCenter())\n            .stop();\n\n        //\n\n        // Kick-off renderer\n        (function animate() { // IIFE\n            if(state.onFrame) state.onFrame();\n\n            // Update tooltip\n            raycaster.setFromCamera(mousePos, state.camera);\n            const intersects = raycaster.intersectObjects(state.graphScene.children)\n                .filter(o => o.object.name); // Check only objects with labels\n            toolTipElem.textContent = intersects.length ? intersects[0].object.name : '';\n\n            // Frame cycle\n            tbControls.update();\n            state.renderer.render(scene, state.camera);\n            requestAnimationFrame(animate);\n        })();\n    },\n\n    update: function updateFn(state) {\n        resizeCanvas();\n\n        state.onFrame = null; // Pause simulation\n        state.infoElem.textContent = 'Loading something with babel 9...';\n\n        if (state.graphData.nodes.length || state.graphData.links.length) {\n            console.info('3d-force-graph loading', state.graphData.nodes.length + ' nodes', state.graphData.links.length + ' links');\n        }\n\n        if (!state.fetchingJson && state.jsonUrl && !state.graphData.nodes.length && !state.graphData.links.length) {\n            // (Re-)load data\n            state.fetchingJson = true;\n            qwest.get(state.jsonUrl).then((_, json) => {\n                state.fetchingJson = false;\n                state.graphData = json;\n                updateFn(state);  // Force re-update\n            });\n        }\n\n        // Auto add color to uncolored nodes\n        autoColorNodes(state.graphData.nodes, state.autoColorBy, state.colorField);\n\n        // parse links\n        state.graphData.links.forEach(link => {\n            link.source = link[state.linkSourceField];\n            link.target = link[state.linkTargetField];\n        });\n\n        // Add WebGL objects\n        while (state.graphScene.children.length) { state.graphScene.remove(state.graphScene.children[0]) } // Clear the place\n\t\tconst visitedAccessor = accessorFn(state.visitedField)\n        const nameAccessor = accessorFn(state.nameField);\n        const valAccessor = accessorFn(state.valField);\n        const colorAccessor = accessorFn(state.colorField);\n        let sphereGeometries = {}; // indexed by node value\n        let sphereMaterials = {}; // indexed by color\n        state.graphData.nodes.forEach(node => {\n            const val = valAccessor(node) || 1;\n            if (!sphereGeometries.hasOwnProperty(val)) {\n                sphereGeometries[val] = new THREE.SphereGeometry(Math.cbrt(val) * state.nodeRelSize, state.nodeResolution, state.nodeResolution);\n            }\n\t\t\tvar isVisited = visitedAccessor(node) || false;\n\t\t\tvar baseColor;\n\t\t\tif (isVisited) {\n\t\t\t\tbaseColor = 0x00ff00;\n\t\t\t} else {\n\t\t\t\tbaseColor = 0x0000ff;\n\t\t\t}\n\n            const color = colorAccessor(node) || baseColor;\n            if (!sphereMaterials.hasOwnProperty(color)) {\n                sphereMaterials[color] = new THREE.MeshLambertMaterial({ color, transparent: true, opacity: 0.75 });\n            }\n\n            const sphere = new THREE.Mesh(sphereGeometries[val], sphereMaterials[color]);\n\n            sphere.name = nameAccessor(node); // Add label\n            sphere.__data = node; // Attach node data\n\n            state.graphScene.add(node.__sphere = sphere);\n        });\n\n        const lineMaterial = new THREE.LineBasicMaterial({ color: 0xf0f0f0, transparent: true, opacity: state.lineOpacity });\n        state.graphData.links.forEach(link => {\n            const geometry = new THREE.BufferGeometry();\n            geometry.addAttribute('position', new THREE.BufferAttribute(new Float32Array(2 * 3), 3));\n            const line = new THREE.Line(geometry, lineMaterial);\n\n            line.renderOrder = 10; // Prevent visual glitches of dark lines on top of spheres by rendering them last\n\n            state.graphScene.add(link.__line = line);\n        });\n\n        if (state.camera.position.x === 0 && state.camera.position.y === 0) {\n            // If camera still in default position (not user modified)\n            state.camera.lookAt(state.graphScene.position);\n            state.camera.position.z = Math.cbrt(state.graphData.nodes.length) * CAMERA_DISTANCE2NODES_FACTOR;\n        }\n\n        // Feed data to force-directed layout\n        const isD3Sim = state.forceEngine !== 'ngraph';\n        let layout;\n        if (isD3Sim) {\n            // D3-force\n            (layout = state.d3ForceLayout)\n                .stop()\n                .alpha(1)// re-heat the simulation\n                .numDimensions(state.numDimensions)\n                .nodes(state.graphData.nodes)\n                .force('link')\n                    .id(d => d[state.idField])\n                    .links(state.graphData.links);\n        } else {\n            // ngraph\n            const graph = ngraph.graph();\n            state.graphData.nodes.forEach(node => { graph.addNode(node[state.idField]); });\n            state.graphData.links.forEach(link => { graph.addLink(link.source, link.target); });\n            layout = ngraph['forcelayout' + (state.numDimensions === 2 ? '' : '3d')](graph);\n            layout.graph = graph; // Attach graph reference to layout\n        }\n\n        for (let i=0; i<state.warmupTicks; i++) { layout[isD3Sim?'tick':'step'](); } // Initial ticks before starting to render\n\n        let cntTicks = 0;\n        const startTickTime = new Date();\n        state.onFrame = layoutTick;\n        state.infoElem.textContent = '';\n\n        //\n\n        function resizeCanvas() {\n            if (state.width && state.height) {\n                state.renderer.setSize(state.width, state.height);\n                state.camera.aspect = state.width/state.height;\n                state.camera.updateProjectionMatrix();\n            }\n        }\n\n        function layoutTick() {\n            if (cntTicks++ > state.cooldownTicks || (new Date()) - startTickTime > state.cooldownTime) {\n                state.onFrame = null; // Stop ticking graph\n            }\n\n            layout[isD3Sim?'tick':'step'](); // Tick it\n\n            // Update nodes position\n            state.graphData.nodes.forEach(node => {\n                const sphere = node.__sphere;\n                if (!sphere) return;\n\n                const pos = isD3Sim ? node : layout.getNodePosition(node[state.idField]);\n\n                sphere.position.x = pos.x;\n                sphere.position.y = pos.y || 0;\n                sphere.position.z = pos.z || 0;\n            });\n\n            // Update links position\n            state.graphData.links.forEach(link => {\n                const line = link.__line;\n                if (!line) return;\n\n                const pos = isD3Sim\n                        ? link\n                        : layout.getLinkPosition(layout.graph.getLink(link.source, link.target).id),\n                    start = pos[isD3Sim ? 'source' : 'from'],\n                    end = pos[isD3Sim ? 'target' : 'to'],\n                    linePos = line.geometry.attributes.position;\n\n                linePos.array[0] = start.x;\n                linePos.array[1] = start.y || 0;\n                linePos.array[2] = start.z || 0;\n                linePos.array[3] = end.x;\n                linePos.array[4] = end.y || 0;\n                linePos.array[5] = end.z || 0;\n\n                linePos.needsUpdate = true;\n                line.geometry.computeBoundingSphere();\n            });\n        }\n\n        function autoColorNodes(nodes, colorBy, colorField) {\n            if (!colorBy || typeof colorField !== 'string') return;\n\n            const colorByAccessor = accessorFn(colorBy);\n\n            const colors = schemePaired; // Paired color set from color brewer\n\n            const uncoloredNodes = nodes.filter(node => !node[colorField]),\n                nodeGroups = {};\n\n            uncoloredNodes.forEach(node => { nodeGroups[colorByAccessor(node)] = null });\n            Object.keys(nodeGroups).forEach((group, idx) => { nodeGroups[group] = idx });\n\n            uncoloredNodes.forEach(node => {\n                node[colorField] = parseInt(colors[nodeGroups[colorByAccessor(node)] % colors.length].slice(1), 16);\n            });\n        }\n    }\n});\n\n"]}